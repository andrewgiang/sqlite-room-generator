package com.andrewgiang.roomsqlparser;

import com.google.common.base.CaseFormat;
import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.util.ArrayList;
import java.util.List;

import static com.andrewgiang.roomsqlparser.CaseFormatUtil.ALPHA_NUMERIC_UNDERSCORE_REGEX;
import static com.google.common.base.Preconditions.checkNotNull;

class RoomBuilder {
  private String tableName;

  private List<Field> fieldList = new ArrayList<>();

  void tableName(String text) {
    tableName = text;
  }

  void addField(Field field) {
    fieldList.add(field);
  }


  JavaFile build(String modelPackage) {
    return JavaFile.builder(modelPackage, buildTypeSpec()).build();
  }

  private TypeSpec buildTypeSpec() {
    checkNotNull(tableName);
    TypeSpec.Builder builder = TypeSpec
        .classBuilder(CaseFormatUtil.convertTo(CaseFormat.UPPER_CAMEL, getTableNameAlphaNumeric()))
        .addModifiers(Modifier.PUBLIC)
        .addAnnotation(entityAnnotationSpec(tableName));
    for (Field field : fieldList) {
      builder.addField(buildFieldSpec(field));
    }

    return builder.build();
  }

  private String getTableNameAlphaNumeric() {
    return tableName.replaceAll(ALPHA_NUMERIC_UNDERSCORE_REGEX, "");
  }

  private FieldSpec buildFieldSpec(Field field) {
    FieldSpec.Builder builder = FieldSpec.builder(
        field.getAffanityType(),
        CaseFormatUtil.convertTo(CaseFormat.LOWER_CAMEL, field.getColumnNameAlphaNumeric()),
        Modifier.PUBLIC
    ).addAnnotation(columnAnnotationSpec(field.getColumnName()));


    if (field.isAutoIncrementPrimary()) {
      builder.addAnnotation(primaryKeySpec(true));
    } else if (field.isPrimaryKey()) {
      builder.addAnnotation(primaryKeySpec(false));
    }

    return builder.build();
  }

  private AnnotationSpec primaryKeySpec(boolean isAutoGenerated) {
    AnnotationSpec.Builder primaryKey = AnnotationSpec.builder(ClassName.get("android.arch.persistence.room", "PrimaryKey"));
    if (isAutoGenerated) {
      primaryKey.addMember("autoGenerate", "$L", "true");
    }
    return primaryKey.build();
  }

  private AnnotationSpec columnAnnotationSpec(String columnName) {
    return AnnotationSpec.builder(ClassName.get("android.arch.persistence.room", "ColumnInfo"))
        .addMember("name", "$S", columnName).build();
  }

  private AnnotationSpec entityAnnotationSpec(String tableName) {
    return AnnotationSpec.builder(ClassName.get("android.arch.persistence.room", "Entity"))
        .addMember("tableName", "$N", tableName).build();
  }
}
